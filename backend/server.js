// require("dotenv").config();
// const express = require("express");
// const bcrypt = require("bcrypt");
// const jwt = require("jsonwebtoken");
// const { Pool } = require("pg");
// const cors = require("cors");

// // üöÄ Express “õ–æ—Å—ã–º—à–∞—Å—ã–Ω –±–∞—Å—Ç–∞—É
// const app = express();

// // ‚úÖ PostgreSQL-–≥–µ “õ–æ—Å—ã–ª—É
// const pool = new Pool({
//   user: process.env.DB_USER,
//   password: process.env.DB_PASSWORD,
//   host: process.env.DB_HOST,
//   port: process.env.DB_PORT,
//   database: process.env.DB_NAME,
// });

// app.use(express.json());
// app.use(cors());

// // ‚úÖ –¢—ñ—Ä–∫–µ–ª—É –º–∞—Ä—à—Ä—É—Ç—ã (Register)
// app.post("/register", async (req, res) => {
//   try {
//     const { email, password } = req.body;

//     console.log("üîπ –¢—ñ—Ä–∫–µ–ª—É —Å“±—Ä–∞–Ω—ã—Å—ã –∞–ª—ã–Ω–¥—ã:", email);

//     if (!email || !password) {
//       console.log("‚ùå “ö–∞—Ç–µ: Email –Ω–µ–º–µ—Å–µ “õ“±–ø–∏—è—Å”©–∑ –µ–Ω–≥—ñ–∑—ñ–ª–º–µ–≥–µ–Ω.");
//       return res.status(400).json({ error: "–ë–∞—Ä–ª—ã“õ ”©—Ä—ñ—Å—Ç–µ—Ä–¥—ñ —Ç–æ–ª—Ç—ã—Ä—ã“£—ã–∑" });
//     }

//     // “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ –±“±—Ä—ã–Ω —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
//     const existingUser = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
//     if (existingUser.rowCount > 0) {
//       console.log("‚ùå “ö–∞—Ç–µ: –ë“±–ª email –±–∞–∑–∞–¥–∞ –±–∞—Ä.");
//       return res.status(400).json({ error: "–ë“±–ª email —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω" });
//     }

//     // –ü–∞—Ä–æ–ª—å–¥—ñ —Ö—ç—à—Ç–µ—É
//     const hashedPassword = await bcrypt.hash(password, 10);

//     // –ñ–∞“£–∞ “õ–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã “õ–æ—Å—É
//     const newUser = await pool.query(
//       "INSERT INTO users (email, password) VALUES ($1, $2) RETURNING *",
//       [email, hashedPassword]
//     );

//     console.log("‚úÖ “ö–æ–ª–¥–∞–Ω—É—à—ã —Å”ô—Ç—Ç—ñ —Ç—ñ—Ä–∫–µ–ª–¥—ñ:", newUser.rows[0]);
//     res.status(201).json({ message: "–¢—ñ—Ä–∫–µ–ª—É —Å”ô—Ç—Ç—ñ –∞—è“õ—Ç–∞–ª–¥—ã!" });
//   } catch (error) {
//     console.error("‚ùå –¢—ñ—Ä–∫–µ–ª—É “õ–∞—Ç–µ—Å—ñ:", error);
//     res.status(500).json({ error: "“ö–∞—Ç–µ! “ö–æ–ª–¥–∞–Ω—É—à—ã —Ç—ñ—Ä–∫–µ–ª–º–µ–¥—ñ." });
//   }
// });

// // ‚úÖ –ö—ñ—Ä—É –º–∞—Ä—à—Ä—É—Ç—ã (Login)
// app.post("/login", async (req, res) => {
//   try {
//     const { email, password } = req.body;
//     console.log(`üîπ –õ–æ–≥–∏–Ω —Å“±—Ä–∞–Ω—ã—Å—ã: email=${email}`);

//     // “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã –±–∞–∑–∞–¥–∞–Ω —ñ–∑–¥–µ—É
//     const user = await pool.query("SELECT * FROM users WHERE email = $1", [email]);

//     if (user.rowCount === 0) {
//       console.log("‚ùå “ö–∞—Ç–µ: “ö–æ–ª–¥–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã!");
//       return res.status(401).json({ error: "“ö–æ–ª–¥–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã!" });
//     }

//     console.log("‚úÖ “ö–æ–ª–¥–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–¥—ã:", user.rows[0].email);

//     // “ö“±–ø–∏—è—Å”©–∑–¥—ñ —Ç–µ–∫—Å–µ—Ä—É
//     const isValid = await bcrypt.compare(password, user.rows[0].password);
//     if (!isValid) {
//       console.log("‚ùå “ö–∞—Ç–µ: “ö“±–ø–∏—è—Å”©–∑ –¥“±—Ä—ã—Å –µ–º–µ—Å!");
//       return res.status(401).json({ error: "“ö–∞—Ç–µ “õ“±–ø–∏—è—Å”©–∑!" });
//     }

//     console.log("‚úÖ “ö“±–ø–∏—è—Å”©–∑ –¥“±—Ä—ã—Å!");

//     // JWT —Ç–æ–∫–µ–Ω –∂–∞—Å–∞—É
//     const token = jwt.sign({ email }, process.env.JWT_SECRET, { expiresIn: "1h" });

//     console.log("üîπ “ö–æ–ª–¥–∞–Ω—É—à—ã“ì–∞ —Ç–æ–∫–µ–Ω –±–µ—Ä—ñ–ª–¥—ñ.");
//     res.json({ message: "–°”ô—Ç—Ç—ñ –∫—ñ—Ä–¥—ñ“£—ñ–∑!", token });
//   } catch (error) {
//     console.error("‚ùå –ö—ñ—Ä—É “õ–∞—Ç–µ—Å—ñ:", error);
//     res.status(500).json({ error: "“ö–∞—Ç–µ! “ö–æ–ª–¥–∞–Ω—É—à—ã –∫—ñ—Ä–µ –∞–ª–º–∞–¥—ã." });
//   }
// });

// // ‚úÖ –°–µ—Ä–≤–µ—Ä–¥—ñ —ñ—Å–∫–µ “õ–æ—Å—É
// const PORT = process.env.PORT || 5000;
// app.listen(PORT, () => {
//   console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä ${PORT} –ø–æ—Ä—Ç—ã–Ω–¥–∞ —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã`);
// });




require("dotenv").config();
const express = require("express");
const cors = require("cors");
const { Pool } = require("pg");

const app = express();
const pool = new Pool({
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  database: process.env.DB_NAME,
});

app.use(express.json());
app.use(cors());

app.post("/order", async (req, res) => {
  const { email, phone, product, quantity, delivery, payment, address, comment } = req.body;
  await pool.query(
    "INSERT INTO orders (email, phone, product, quantity, delivery, payment, address, comment) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)",
    [email, phone, product, quantity, delivery, payment, address, comment]
  );
  res.json({ message: "–¢–∞–ø—Å—ã—Ä—ã—Å “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã!" });
});

app.listen(5000, () => console.log("–°–µ—Ä–≤–µ—Ä —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã"));
